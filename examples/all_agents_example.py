"""
Example usage of all LangGraph ReAct Agents
Demonstrates the complete multi-agent system for stock analysis
"""

import asyncio
import json
from datetime import datetime

from agents.portfolio_optimizer_react.agent import PortfolioOptimizerReActAgent
from agents.index_scraper_react.agent import IndexScraperReActAgent
from agents.timing_advisor_react.agent import TimingAdvisorReActAgent
from agents.compliance_logger_react.agent import ComplianceLoggerReActAgent

async def example_complete_workflow():
    """Example: Complete multi-agent workflow"""
    print("üöÄ Complete Multi-Agent Stock Analysis Workflow")
    print("=" * 60)
    
    # Initialize all agents
    index_scraper = IndexScraperReActAgent()
    portfolio_optimizer = PortfolioOptimizerReActAgent()
    timing_advisor = TimingAdvisorReActAgent()
    compliance_logger = ComplianceLoggerReActAgent()
    
    try:
        # Step 1: Collect Market Data
        print("\nüìä Step 1: Market Data Collection")
        print("-" * 40)
        
        market_data_result = await index_scraper.collect_market_data(
            data_sources=['yahoo_finance', 'alpha_vantage'],
            collection_frequency=30,
            hitl_enabled=True
        )
        
        if market_data_result['status'] == 'success':
            print("‚úÖ Market data collected successfully")
            market_data = market_data_result['data']
            print(f"üìà Indices collected: {len(market_data['current_indices'])}")
            print(f"üìä Data quality: {market_data['data_quality']['score']}/100")
            
            # Show key reasoning steps
            print("\nüß† Key Market Data Insights:")
            for step in market_data_result['reasoning_trace']:
                if any(keyword in step for keyword in ['SENTIMENT', 'TREND', 'QUALITY']):
                    print(f"  ‚Ä¢ {step}")
        else:
            print(f"‚ùå Market data collection failed: {market_data_result.get('error')}")
            return
        
        # Step 2: Market Timing Analysis
        print("\n‚è∞ Step 2: Market Timing Analysis")
        print("-" * 40)
        
        timing_result = await timing_advisor.analyze_market_timing(
            timeframe="medium",
            analysis_depth="advanced",
            hitl_enabled=True
        )
        
        if timing_result['status'] == 'success':
            print("‚úÖ Market timing analysis completed")
            timing_recs = timing_result['recommendations']
            print(f"üéØ Overall timing: {timing_recs['overall_timing']}")
            print(f"üìä Confidence: {timing_recs['confidence']}%")
            print(f"‚öñÔ∏è Signal strength: {timing_recs['signal_strength']:.2f}")
            
            # Show market regime
            regime = timing_recs['market_regime']
            print(f"üåç Market regime: {regime.get('description', 'unknown')}")
            
            print("\nüß† Key Timing Insights:")
            for step in timing_result['reasoning_trace']:
                if any(keyword in step for keyword in ['SIGNALS', 'REGIME', 'TIMING']):
                    print(f"  ‚Ä¢ {step}")
        else:
            print(f"‚ùå Timing analysis failed: {timing_result.get('error')}")
            return
        
        # Step 3: Portfolio Optimization
        print("\nüíº Step 3: Portfolio Optimization")
        print("-" * 40)
        
        portfolio_result = await portfolio_optimizer.optimize_portfolio(
            budget=75000,
            timeframe="Medium",
            risk_level="Medium",
            hitl_enabled=True
        )
        
        if portfolio_result['status'] == 'success':
            print("‚úÖ Portfolio optimization completed")
            portfolio = portfolio_result['portfolio']
            print(f"üìä Positions: {len(portfolio['positions'])}")
            print(f"üí∞ Total invested: ${portfolio['total_investment']:,.2f}")
            print(f"üìà Expected return: {portfolio['expected_return']:.1f}%")
            print(f"üõ°Ô∏è Risk score: {portfolio['risk_score']:.1f}/3.0")
            
            print("\nüèÜ Top Holdings:")
            for pos in portfolio['positions'][:3]:
                print(f"  ‚Ä¢ {pos['symbol']}: {pos['allocation_percent']}% (${pos['investment_amount']:,.2f})")
            
            print("\nüß† Key Optimization Insights:")
            for step in portfolio_result['reasoning_trace']:
                if any(keyword in step for keyword in ['OPTIMIZE', 'STRATEGY', 'ALLOCATION']):
                    print(f"  ‚Ä¢ {step}")
        else:
            print(f"‚ùå Portfolio optimization failed: {portfolio_result.get('error')}")
            return
        
        # Step 4: Compliance Monitoring
        print("\nüõ°Ô∏è Step 4: Compliance Monitoring")
        print("-" * 40)
        
        compliance_result = await compliance_logger.monitor_compliance(
            monitoring_scope="full",
            hitl_enabled=True
        )
        
        if compliance_result['status'] == 'success':
            print("‚úÖ Compliance monitoring completed")
            compliance_report = compliance_result['compliance_report']
            print(f"üìä Compliance score: {compliance_report['compliance_score']:.1f}/100")
            print(f"üö® Total violations: {compliance_report['total_violations']}")
            print(f"üìã Status: {compliance_report['compliance_status']}")
            
            # Show violations by severity
            violations = compliance_report['violations_by_severity']
            print(f"üî¥ High severity: {violations['high']}")
            print(f"üü° Medium severity: {violations['medium']}")
            print(f"üü¢ Low severity: {violations['low']}")
            
            print("\nüß† Key Compliance Insights:")
            for step in compliance_result['reasoning_trace']:
                if any(keyword in step for keyword in ['VIOLATIONS', 'COMPLIANCE', 'RISK']):
                    print(f"  ‚Ä¢ {step}")
        else:
            print(f"‚ùå Compliance monitoring failed: {compliance_result.get('error')}")
            return
        
        # Step 5: Integrated Analysis Summary
        print("\nüìã Step 5: Integrated Analysis Summary")
        print("-" * 40)
        
        print("üéØ Multi-Agent Analysis Results:")
        print(f"  üìä Market Data Quality: {market_data['data_quality']['score']}/100")
        print(f"  ‚è∞ Market Timing: {timing_recs['overall_timing']}")
        print(f"  üíº Portfolio Expected Return: {portfolio['expected_return']:.1f}%")
        print(f"  üõ°Ô∏è Compliance Score: {compliance_report['compliance_score']:.1f}/100")
        
        # Generate integrated recommendation
        overall_score = (
            market_data['data_quality']['score'] * 0.2 +
            timing_recs['confidence'] * 0.3 +
            (portfolio['expected_return'] * 5) * 0.3 +  # Scale return to 0-100
            compliance_report['compliance_score'] * 0.2
        )
        
        print(f"\nüèÜ Overall System Confidence: {overall_score:.1f}/100")
        
        if overall_score >= 80:
            recommendation = "PROCEED with portfolio implementation"
            print(f"‚úÖ {recommendation}")
        elif overall_score >= 60:
            recommendation = "PROCEED with CAUTION - monitor closely"
            print(f"‚ö†Ô∏è {recommendation}")
        else:
            recommendation = "HOLD - address issues before proceeding"
            print(f"üö® {recommendation}")
        
        # HITL Summary
        hitl_required = [
            market_data_result.get('hitl_required', False),
            timing_result.get('hitl_required', False),
            portfolio_result.get('hitl_required', False),
            compliance_result.get('hitl_required', False)
        ]
        
        print(f"\nüë§ Human Reviews Required: {sum(hitl_required)}/4 agents")
        
        print("\nüéâ Multi-agent analysis workflow completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Workflow error: {e}")

async def example_agent_status_check():
    """Example: Check status of all agents"""
    print("\nü§ñ Agent Status Check")
    print("=" * 40)
    
    agents = [
        ("Index Scraper", IndexScraperReActAgent()),
        ("Portfolio Optimizer", PortfolioOptimizerReActAgent()),
        ("Timing Advisor", TimingAdvisorReActAgent()),
        ("Compliance Logger", ComplianceLoggerReActAgent())
    ]
    
    for name, agent in agents:
        try:
            status = await agent.get_agent_status()
            print(f"\n{name}:")
            print(f"  Status: {status['status']}")
            print(f"  Version: {status['version']}")
            print(f"  Graph Nodes: {status['graph_nodes']}")
            print(f"  MCP Connected: {status.get('mcp_server_connected', 'N/A')}")
        except Exception as e:
            print(f"\n{name}: ‚ùå Error - {e}")

async def example_parallel_analysis():
    """Example: Run multiple agents in parallel"""
    print("\n‚ö° Parallel Agent Analysis")
    print("=" * 40)
    
    # Initialize agents
    index_scraper = IndexScraperReActAgent()
    timing_advisor = TimingAdvisorReActAgent()
    compliance_logger = ComplianceLoggerReActAgent()
    
    # Run agents in parallel (independent operations)
    print("üöÄ Starting parallel analysis...")
    
    tasks = [
        index_scraper.collect_market_data(['yahoo_finance'], 30, False),
        timing_advisor.analyze_market_timing("short", "medium", False),
        compliance_logger.monitor_compliance("portfolio", False)
    ]
    
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    print("‚úÖ Parallel analysis completed!")
    
    for i, (name, result) in enumerate([
        ("Market Data Collection", results[0]),
        ("Timing Analysis", results[1]),
        ("Compliance Monitoring", results[2])
    ]):
        if isinstance(result, Exception):
            print(f"‚ùå {name}: Error - {result}")
        elif result.get('status') == 'success':
            print(f"‚úÖ {name}: Success")
        else:
            print(f"‚ö†Ô∏è {name}: {result.get('status', 'unknown')}")

async def example_audit_trail_analysis():
    """Example: Analyze audit trails across all agents"""
    print("\nüìù Audit Trail Analysis")
    print("=" * 40)
    
    audit_files = [
        ("Portfolio Optimizer", "data/portfolio_optimizer_audit.json"),
        ("Index Scraper", "data/index_scraper_audit.json"),
        ("Timing Advisor", "data/timing_advisor_audit.json"),
        ("Compliance Logger", "data/compliance_logger_audit.json")
    ]
    
    total_entries = 0
    
    for agent_name, file_path in audit_files:
        try:
            import os
            if os.path.exists(file_path):
                with open(file_path, 'r') as f:
                    audit_data = json.load(f)
                
                entries = len(audit_data)
                total_entries += entries
                
                print(f"{agent_name}: {entries} audit entries")
                
                if entries > 0:
                    latest = audit_data[-1]
                    print(f"  Latest: {latest.get('timestamp', 'unknown')}")
                    print(f"  Session: {latest.get('session_id', 'unknown')}")
            else:
                print(f"{agent_name}: No audit file found")
                
        except Exception as e:
            print(f"{agent_name}: Error reading audit - {e}")
    
    print(f"\nTotal audit entries across all agents: {total_entries}")

async def main():
    """Run all examples"""
    print("üéØ Multi-Agent Stock Analysis System Examples")
    print("=" * 70)
    
    try:
        # Run complete workflow
        await example_complete_workflow()
        
        # Check agent status
        await example_agent_status_check()
        
        # Demonstrate parallel processing
        await example_parallel_analysis()
        
        # Analyze audit trails
        await example_audit_trail_analysis()
        
        print("\nüéâ All examples completed successfully!")
        print("\nüìö System Features Demonstrated:")
        print("  ‚úÖ Multi-agent coordination and workflow")
        print("  ‚úÖ ReAct reasoning with explicit thought traces")
        print("  ‚úÖ Human-in-the-loop approval workflows")
        print("  ‚úÖ Comprehensive audit logging and compliance")
        print("  ‚úÖ Market data collection and quality assessment")
        print("  ‚úÖ Technical analysis and market timing")
        print("  ‚úÖ Portfolio optimization with Modern Portfolio Theory")
        print("  ‚úÖ Regulatory compliance monitoring")
        print("  ‚úÖ Parallel processing capabilities")
        print("  ‚úÖ Integrated analysis and recommendations")
        
    except Exception as e:
        print(f"‚ùå Error running examples: {e}")

if __name__ == "__main__":
    asyncio.run(main())